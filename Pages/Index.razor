@page "/"

@using RedditReader.Data
@using System.Collections.Concurrent;

@inject RedditService RedditService
@implements IDisposable

<PageTitle>Reddit Statistics</PageTitle>

@if (posts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <div>&nbsp;</div>
        <h4>r/worldnews Statistics</h4>
        <hr />
        <p>Posts with Most Upvotes: @topPostTitle (@topPostUpvotes upvotes)</p>
        <p>User with Most Posts: @topUser (@topUserPosts posts)</p>
    </div>

}

@code {
    private string subreddit = "worldnews";
    private RedditResponse posts;
    private Timer _timer;
    private string topPostTitle = "";
    private int topPostUpvotes = 0;
    private string topUser = "";
    private int topUserPosts = 0;
    private ConcurrentDictionary<string, int> userPostCount = new ConcurrentDictionary<string, int>();

    protected override async Task OnInitializedAsync()
    {
        await StartTracking();
    }

    private async Task StartTracking()
    {
        _timer = new Timer(async _ => await TrackPosts(), null, 0, 10000);
    }

    private async Task TrackPosts()
    {
        posts = await RedditService.GetPostsAsync(subreddit);
        foreach (var post in posts.data.children)
        {
            if (post.data.ups > topPostUpvotes)
            {
                topPostUpvotes = post.data.ups;
                topPostTitle = post.data.title;
            }

            userPostCount.AddOrUpdate(post.data.author, 1, (key, value) => value + 1);
        }
        topUser = userPostCount.OrderByDescending(u => u.Value).FirstOrDefault().Key;
        topUserPosts = userPostCount[topUser];
        this.InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
